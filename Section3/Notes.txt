Provider Plugins
A provider is a plugin that lets Terraform manage an external API
Terraform init -> Plugins required for the provider are automatically downloaded and saved locally to a .terraform folder

Can specify AWS and Azure in the same Terraform init file

Resources - resource block describes one or more infrastructure objects, 
e.g. aws_instance, aws_alb, iam_user, digitalocean_droplet

A resource block declares a resource of a given type ("aws_instance") with a given local name ("myec2")

resource type and name together serve as an identifier for a given resource - must be unique!

You can only use the resource that is supported by a specific provider!

Core concepts, standard syntax remains similar across all providers

Terraform requires explicit source information for any providers that are not HashiCorp-maintained, using a new syntax in the required_providers nested block inside the terraform configuration block

If you keep the infrastructure running, you will get charged for it. Need to delete infrastructure resources created via Terraform

Approach 1 - Destroy ALL
"terraform destroy" allows us to destroy ALL the resources that are created within the folder

Approach 2 - Destroy SOME
"terraform destroy" with -target flag allows us to destroy specific resource 
The -target option can be used to focus Terraform's attention on only a subset of resources; Resource Type + Local Resource Name
resource type = aws_instance,
local resource name = "myec2"
"terraform destroy -target aws_instance.myec2"

State File
Terraform stores the state of the infrastructure that is being created from the TF files
This state allows Terraform to map real world resource to your existing configuration

terraform.tfstate keeps track of resources that are already created as well as metadata about the resources

Desired State and Current State

Terraform's primary function is to create, modify, and destroy infrastructure resources to match the desired state described in a Terraform configuration

Current state is the actual state of a resource that is currently deployed

e.g you can create an ec2 instance with instance type t2.micro in Terraform but you still can change it in the console to t2.medium

Important - Terraform tries to ensure that the deployed infrastructure is based on the desired state
If there is a difference between the two, Terraform plan presents a description of the changes necessary to achieve the desired state -> TERRAFORM WILL PROCEED MODIFY THE EXISITING INFRASTRUCTURE

To keep your Terrafrom's state file updated to match the existing infrastructure, use
"terraform refresh"

Provider Architecture
do_droplet.tf -> Terraform <-> Digital Ocean Provider <-> Digital Ocean

Explicitly Setting Provider Version
During terraform init, if version argument is not specified, the most recent provider will be downloaded during initialization
For production use, you should constrain the acceptable provider versions via configuration, to ensure that new versions with breaking changes will not be automatically installed 

Arguments for specifying provider
>=1.0 - Greater than or equal to the version
<=1.0 - Less than or equal to the version
~>2.0 - Any version in the 2.X range
>=2.10, <=2.30 - Any version between 2.10 and 2.30

Terraform .lock file 
- Terraform dependency lock file allows us to lock to a specific version of the provider
- If a particular provider already has a selection recorded in the lock file, Terraform will always re-select that version for installation, even if a newer version is available
- You can override that behavior by adding the "-upgrade" option when you run "terraform init"

Terraform refresh command will check the latest state of your infrastructure (if it is updated manually) and update the state file accordingly

You don't have to manually run Terraform refresh every time because it is automatically executed every time you run "terraform plan" or "terraform apply" 

Running "terraform refresh" manually is dangerous as it can remove your entire TF state file, especially if the resource cannot be found

AWS Provider - Authentication Configuration
DO NOT HARD-CODE YOUR ACCESS KEY AND SECRET KEY DIRECTLY IN YOUR .TF FILE

Refer to aws-authenticationconfig-lab for the correct example

If shared files lines are not added to provider block, by default, Terraform will locate these files at $HOME/.aws/config and $HOME/.aws/credentials on Linux and macOS, or %USERPROFILE%\.aws\config and USERPROFILE%\.aws\credentials on Windows - this is the same as how you use the aws cli

run "terraform apply -auto-approve"